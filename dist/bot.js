"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.botStarter = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const telegraf_1 = require("telegraf");
const config_1 = require("./config");
const excel_1 = require("./utils/excel");
const find_1 = require("./utils/find");
const bot = new telegraf_1.Telegraf(config_1.ENV.TOKEN, {});
bot.catch((e, ctx) => {
    console.log(e);
    ctx.reply("Agar botda xatolik bo'lsa   /start   tugmasin bosib yuboring");
});
bot.start(async (ctx) => {
    const chatId = ctx.chat.id;
    const first_name = ctx.from.first_name;
    const username = ctx.from.username;
    const telegram_id = ctx.from.id;
    const user = await (0, find_1.getUserAll)();
    (0, find_1.createUser)(chatId, first_name, username, telegram_id);
    if (ctx.chat.id === 563662874) {
        console.log("//////////IsAdmin: " + (0, find_1.getIsAdmin)(chatId));
        await ctx.reply(`Salom ${first_name} , Ma'lumot olish uchun kerakli tugmani bosing!\n\n Siz Adminsiz🥳`);
        const buttons = [];
        buttons.push([telegraf_1.Markup.button.callback('📱Info', '📱'), telegraf_1.Markup.button.callback('☎️Contact', '☎️')]);
        buttons.push([telegraf_1.Markup.button.callback('💾Portfolio', '💾'), telegraf_1.Markup.button.callback('⚙️Resume', '⚙️')]);
        buttons.push([telegraf_1.Markup.button.callback('📉Skills', '📉'), telegraf_1.Markup.button.callback("📈statistica", "🙆‍♂️")]);
        ctx.reply('menyu=>', telegraf_1.Markup.keyboard(buttons).resize(true));
    }
    else {
        await ctx.reply(`Salom ${first_name} , Ma'lumot olish uchun kerakli tugmani bosing!`);
        const buttons = [];
        buttons.push([telegraf_1.Markup.button.callback('📱Info', '📱'), telegraf_1.Markup.button.callback('☎️Contact', '☎️')]);
        buttons.push([telegraf_1.Markup.button.callback('💾Portfolio', '💾'), telegraf_1.Markup.button.callback('⚙️Resume', '⚙️')]);
        buttons.push([telegraf_1.Markup.button.callback('📉Skills', '📉')]);
        ctx.reply('menyu=>', telegraf_1.Markup.keyboard(buttons).resize(true));
    }
    ////send message-------------------
    const botToken = "5337117381:AAGINqPhprBHznxExaPBs2ndMgeZNGXg-TY";
    const chat = "563662874";
    // const chat = 651985244;
    const msg = `Bot:@Sattoraliyev_bot
                   Username: ${username}
                   ChatId: ${chatId}`;
    let url = `https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chat}&text=${msg}`;
    await axios_1.default.get(url);
});
///  excel
bot.hears(/📈/, async (ctx) => {
    ctx.reply("Ma'lumotlar taqdim etilmoqda!!!");
    let file = await (0, excel_1.createExcel)();
    ctx.replyWithDocument({
        source: file
    });
});
bot.hears(/Info/, ctx => {
    ctx.reply("My name is Iqboljon, I am a backend programmer \n\nMening ismim Iqboljon, Backend dasturchiman");
});
bot.hears(/Contact/, ctx => {
    const tel = "+998900590103";
    const gmail = "sattoraliyeviqboljon0@gmail.com";
    const instagram = "instagram.com/sattoraliyeviqboljon/";
    const github = "github.com/WebGeniuses";
    const site = "https://sattoraliyev.devfolio.io/";
    const tme = 't.me/Sattoraliyev_Iqboljon';
    ctx.reply(`Tel : ${tel} \nGmail : ${gmail} \nInstagram : ${instagram}  \n telegram: ${tme} \nMy site : ${site} \nGithub : ${github}`);
});
bot.hears(/Portfolio/, ctx => {
    // const Portfolio = ".\src\portfolio\git.jpg"
    // ctx.replyWithPhoto({
    //     source: fs.createReadStream("./src/portfolio/git.jpg")
    // });
    ctx.reply(`My site: https://sattoraliyev.devfolio.io/ \n\n GitHub: github.com/WebGeniuses`);
});
bot.hears(/Resume/, ctx => {
    ctx.replyWithPhoto({
        source: fs_1.default.createReadStream("./src/portfolio/Iqboljon CV.png")
    });
});
bot.hears(/Skills/, ctx => {
    ctx.reply("Back-end Skills : NodeJS, ExpressJS, MongoDB  \n\nMy dev-tollbox :  Git,  Visual Studio Code. \n\nAnother : C++ Algorith, TelegramBot ...");
});
const botStarter = (instance, option, next) => {
    bot.launch();
    next();
};
exports.botStarter = botStarter;
//# sourceMappingURL=data:application/json;base64,